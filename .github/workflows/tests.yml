name: shepplogan

on:
  pull_request:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          toolchain: nightly
          override: true

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings

  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check ${{ matrix.checks }}

  # spellcheck:
  #   name: Spellcheck
  #   runs-on: ubuntu-latest
  #   env:
  #     SPELLCHECK_VERSION: 0.12.0
  #   steps:
  #     - name: Checkout reposityor
  #       uses: actions/checkout@v2

  #     - name: Install stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         components: clippy
  #         toolchain: beta
  #         override: true

  #     - name: Cache cargo-spellcheck
  #       uses: actions/cache@v2
  #       id: cache-spellcheck
  #       with:
  #         path: |
  #           ~/.cargo/bin/cargo-spellcheck
  #         key: ${{ runner.os }}-spellcheck-${{ env.SPELLCHECK_VERSION }}

  #     - name: Install clang
  #       run: |
  #         sudo apt-get install clang
  #     - name: Install cargo-spellcheck
  #       uses: actions-rs/cargo@v1
  #       if: steps.cache-spellcheck.outputs.cache-hit == false
  #       with:
  #         command: install 
  #         args: >
  #           cargo-spellcheck
  #           --force
  #           --version=${{ env.SPELLCHECK_VERSION }}
  #           --locked
  #     - name: Check spelling
  #       run: |
  #         cargo spellcheck check --cfg .cargo/spellcheck.toml --recursive --code 1